
# This is the server logic for a Shiny web application.
# You can find out more about building applications with Shiny here:
#
# Create the basic profiling information using the "eagle_profile.submit" and "eagle_profile.slurm.template" scripts
# e.g. sbatch eagle_profile.submit <ngpu> 
# Now use sort and tail to remove the extra header strings "profile,itnum,ncpu,ngpu,function,time_ms"
# cat eagle_11710257_*.res | grep profile | sort -h -r | tail -n +9


library(shiny)
library(shinyFiles)
library(rbokeh)
library(htmlwidgets)



plot_by_function <- function(filename, itter=1)
{
  
 if (file.exists(as.character(filename)))
 {
     df <- NULL
     if (file.exists(as.character(filename))) {
       df <- read.csv(file=filename)
       df <- subset(df, (itnum==itter),c(itnum,ncpu,ngpu,time_ms,function.) )
     }
     if (df != NULL) 
     {
       return (
        figure(title="Eagle time by function (4 interations, dataset size = 2000 x 499829)") %>%
         ly_points(x=ncpu, y=time_ms/1000, data = df, color = function., hover = list(time_ms,function.,ncpu,itnum)) %>%
         y_axis(label = "Time/s", log=F) %>%
         x_axis(label = "Number of CPU cores")
      )
    }
       
}


shinyServer(function(input, output, session) {

  flush1 <- "../../../.."
  testfile <- ""
  volumes <- c('Home directory'=flush1)
  shinyFileChoose(input, 'files', root=volumes, session=session, filetypes=c('', 'txt')) 
  filename_in <- ""
  df <- NULL
  
  reactive_data_path <- reactive({input$dataset_path})
  
 
  output$filepaths  <- renderPrint({
    testfile <-  parseFilePaths(volumes,input$files)[["datapath"]]
    filename_in <- as.character(testfile[1])

    if (file.exists(filename_in)) {
      updateTextInput(session, "dataset_path", value = paste(filename_in))
    }

  }) 
  
  
  # df <- read.csv(file="../../../../Eagle_profiling_data/bracewellr_scatter_12099907.txt")
  output$rbokeh <- renderRbokeh({
    
    if (file.exists(reactive_data_path())) {
      df <- read.csv(file=reactive_data_path())
      df <- subset(df, (itnum<3),c(itnum,ncpu,ngpu,time_ms,function.) )
      figure(title="Eagle benchmarking - Time per function vs Number of CPUs") %>%
        ly_points(x=ncpu, y=time_ms/1000, data=df, color = function., hover = list(time_ms/1000,function.,ncpu,itnum)) %>%
        y_axis(label = "Time/s", log=F) %>%
        x_axis(label = "Number of CPU cores") 
    # 
    }
  })
  
})

# showModal(modalDialog(
 # title = "Important message",
# as.character(filename)
# ))


