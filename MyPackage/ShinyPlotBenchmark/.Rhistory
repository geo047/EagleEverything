tlist <- list(as.character(cpu_by_cpu),ave_by_cpu)
names(tlist) <- c("ncpu","average_time")
ave_time_df <- as.data.frame(tlist,stringsAsFactors=T)
# str(ave_time_df$ncpu)
}
get_total_times_for_repeats <- function(df_rep_ss)
{
df_fact <- NULL
# df_fact <- rep('singularity_s',nrow(df_rep_ss))
# df_rep_ss <- add_factor_col(df_rep_ss,df_fact)
df_fact <- as.factor(df_rep_ss$slurm_id2)  # distingush items by SLURM run so we can sum the total time for each run and then plot by numcpus
lev_sid <- levels(df_fact)
#num_sid_levels <- length(lev_sid)
# initialised results vectors
total_t_vect   <- vector("numeric",  length(lev_sid))
ncpu_vect      <- vector("numeric", length(lev_sid))
sid_group_vect <- vector("numeric",  length(lev_sid))
factlev        <- vector('character',length(lev_sid))
fact_itter <- 1
for (fact in lev_sid) {
vect_ref <-  fact_itter
sub_df <- subset(df_rep_ss, df_fact==fact, c(function.,ncpu,time_ms))
ncpu_vect[vect_ref]    <- unique(sub_df$ncpu)
total_t_vect[vect_ref] <- sum((sub_df)$time_ms)
factlev[vect_ref] <- fact
fact_itter <- fact_itter + 1 ;
}
# Convert vectors to a list, add names and convert list to df
tlist <- list(ncpu_vect,total_t_vect,factlev)
names(tlist) <- c("ncpu","total_time","system")
total_time_df <- as.data.frame(tlist,stringsAsFactors=T)
# str(ave_time_df$ncpu)
}
get_average_times_for_repeats <- function(total_time_df)
{
## compute the average value to be used for hover overlay
num_cpu_vals <- length(unique(total_time_df$ncpu))
ave_by_cpu   <- vector('numeric',num_cpu_vals)
cpu_by_cpu   <- vector('numeric',num_cpu_vals)
cpu_order <- order(as.numeric(unique(total_time_df$ncpu)))
itter <- 2
# str(cpunum)
for (itter in 1:num_cpu_vals) {
cpunum <- unique(as.numeric(total_time_df$ncpu))[cpu_order[itter]]
#message(cpunum)
ave_by_cpu[itter]  <- ave(subset(total_time_df, ncpu==cpunum, c(ncpu,total_time))$total_time)[1]
cpu_by_cpu[itter] <- as.numeric(cpunum)
}
tlist <- list(as.character(cpu_by_cpu),ave_by_cpu)
names(tlist) <- c("ncpu","average_time")
ave_time_df <- as.data.frame(tlist,stringsAsFactors=T)
}
### Repeats singularity scatter boxplot + hover of average total time
# N.B. The eagle_REPEATS_ss_slurm_id.txt data was created via a shell script "repeat_processing.sh"
# likewise with:  eagle_HDF5_cs_eigenblas_slurm_id.txt
# This script added the SLURM_ID value from the .res output data filename
df_rep_ss <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_REPEATS_ss_slurm_id.txt") # eagle_REPEATS_ss.txt
total_time_df <- get_total_times_for_repeats(df_rep_ss)
ave_time_df <- get_average_times_for_repeats(total_time_df)
fig <- figure( ylab = "Total Time (s)", width = 600, legend_location = "top_right") %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "blue", legend="singularity") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "blue") %>%
y_range(c(0,maxrange ))                                                                                     # legend="singularity"
fig
df_rep_ss <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_REPEATS_HDF5_ss_slurm_id.txt")
total_time_df <- get_total_times_for_repeats(df_rep_ss)
ave_time_df <- get_average_times_for_repeats(total_time_df)
fig <- fig %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "red", legend="singularity_hdf") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "red") # legend="singularity & HDF"
fig
df_rep_ss <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_HDF5_cs_eigenblas_slurm_id.txt") # eagle_REPEATS_ss.txt
total_time_df <- get_total_times_for_repeats(df_rep_ss)
ave_time_df <- get_average_times_for_repeats(total_time_df)
fig <- fig %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "green", legend="R native + eigen_use_blas") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "green") #  legend="R & eigen_use_blas & hdf"
fig
plot_by_function <- function(filename, itter=1)
{
if (file.exists(as.character(filename)))
{
df <- NULL
df <- tryCatch({
read.csv(file=filename)
}, warning = function(war) {
print(paste("plot_by_function() read.csv() Warning: ",war))
return (NULL)
}, error = function(err) {
print(paste("plot_by_function() read.csv() Error: ",err))
return (NULL)
}, finally = {
}) # END tryCatch
if (df != NULL)
{
df <- subset(df, (itnum==itter),c(itnum,ncpu,ngpu,time_ms,function.) )
return (
figure(title="Eagle time by function (4 interations, dataset size = 2000 x 499829)") %>%
ly_points(x=ncpu, y=time_ms/1000, data = df, color = function., hover = list(time_ms,function.,ncpu,itnum)) %>%
y_axis(label = "Time/s", log=F) %>%
x_axis(label = "Number of CPU cores")
)
}
}
}
plot_by_function (reactive_data_path(), 2)
#
plot_by_function ("../../../../Eagle_profiling_data/bracewellr_scatter_12099907.txt", 2)
#
plot_by_function ("../../../../Eagle_profiling_data/bracewellr_scatter_12099907.txt", 2)
#
plot_by_function ("../../../../Eagle_profiling_data/bracewellr_scatter_12099907.txt", 2)
#
plot_by_function ("../../../../Eagle_profiling_data/bracewellr_scatter_12099907.txt", 2)
df <- read.csv(file="../../../../Eagle_profiling_data/bracewellr_scatter_12099907.txt")
filename <- "../../../../Eagle_profiling_data/bracewellr_scatter_12099907.txt"
file.exists(as.character(filename))
df <- NULL
df <- tryCatch({
read.csv(file=filename)
}, warning = function(war) {
print(paste("plot_by_function() read.csv() Warning: ",war))
return (NULL)
}, error = function(err) {
print(paste("plot_by_function() read.csv() Error: ",err))
return (NULL)
}, finally = {
}) # END tryCatch
df
#
plot_by_function ("../../../../Eagle_profiling_data/bracewellr_scatter_12099907.txt", 2)
filename <- "../../../../Eagle_profiling_data/bracewellr_scatter_12099907.txt"
df <- NULL
df <- tryCatch({
read.csv(file=filename)
}, warning = function(war) {
print(paste("plot_by_function() read.csv() Warning: ",war))
return (NULL)
}, error = function(err) {
print(paste("plot_by_function() read.csv() Error: ",err))
return (NULL)
}, finally = {
}) # END tryCatch
df <- subset(df, (itnum==itter),c(itnum,ncpu,ngpu,time_ms,function.) )
figure(title="Eagle time by function (4 interations, dataset size = 2000 x 499829)") %>%
ly_points(x=ncpu, y=time_ms/1000, data = df, color = function., hover = list(time_ms,function.,ncpu,itnum)) %>%
y_axis(label = "Time/s", log=F) %>%
x_axis(label = "Number of CPU cores")
itter=1
df <- tryCatch({
read.csv(file=filename)
}, warning = function(war) {
print(paste("plot_by_function() read.csv() Warning: ",war))
return (NULL)
}, error = function(err) {
print(paste("plot_by_function() read.csv() Error: ",err))
return (NULL)
}, finally = {
}) # END tryCatch
df <- subset(df, (itnum==itter),c(itnum,ncpu,ngpu,time_ms,function.) )
figure(title="Eagle time by function (4 interations, dataset size = 2000 x 499829)") %>%
ly_points(x=ncpu, y=time_ms/1000, data = df, color = function., hover = list(time_ms,function.,ncpu,itnum)) %>%
y_axis(label = "Time/s", log=F) %>%
x_axis(label = "Number of CPU cores")
plot_by_function <- function(filename, itter=1)
{
if (file.exists(as.character(filename)))
{
df <- NULL
df <- tryCatch({
read.csv(file=filename)
}, warning = function(war) {
print(paste("plot_by_function() read.csv() Warning: ",war))
return (NULL)
}, error = function(err) {
print(paste("plot_by_function() read.csv() Error: ",err))
return (NULL)
}, finally = {
}) # END tryCatch
if (df != NULL)
{
df <- subset(df, (itnum==itter),c(itnum,ncpu,ngpu,time_ms,function.) )
return (
figure(title="Eagle time by function (4 interations, dataset size = 2000 x 499829)") %>%
ly_points(x=ncpu, y=time_ms/1000, data = df, color = function., hover = list(time_ms,function.,ncpu,itnum)) %>%
y_axis(label = "Time/s", log=F) %>%
x_axis(label = "Number of CPU cores")
)
}
}
}
filename <- "../../../../Eagle_profiling_data/bracewellr_scatter_1209907.txt"
df <- NULL
df <- tryCatch({
read.csv(file=filename)
}, warning = function(war) {
print(paste("plot_by_function() read.csv() Warning: ",war))
return (NULL)
}, error = function(err) {
print(paste("plot_by_function() read.csv() Error: ",err))
return (NULL)
}, finally = {
}) # END tryCatch
df
df != NULL
if (df != NULL)
{
df <- subset(df, (itnum==itter),c(itnum,ncpu,ngpu,time_ms,function.) )
return (
figure(title="Eagle time by function (4 interations, dataset size = 2000 x 499829)") %>%
ly_points(x=ncpu, y=time_ms/1000, data = df, color = function., hover = list(time_ms,function.,ncpu,itnum)) %>%
y_axis(label = "Time/s", log=F) %>%
x_axis(label = "Number of CPU cores")
)
}
{
df <- NULL
df <- tryCatch({
read.csv(file=filename)
}, warning = function(war) {
print(paste("plot_by_function() read.csv() Warning: ",war))
return (NULL)
}, error = function(err) {
print(paste("plot_by_function() read.csv() Error: ",err))
return (NULL)
}, finally = {
}) # END tryCatch
if (df != NULL)
{
df <- subset(df, (itnum==itter),c(itnum,ncpu,ngpu,time_ms,function.) )
return (
figure(title="Eagle time by function (4 interations, dataset size = 2000 x 499829)") %>%
ly_points(x=ncpu, y=time_ms/1000, data = df, color = function., hover = list(time_ms,function.,ncpu,itnum)) %>%
y_axis(label = "Time/s", log=F) %>%
x_axis(label = "Number of CPU cores")
)
}
}
is.null(df)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fig <- figure( ylab = "Total Time (s)", width = 600, legend_location = "top_right") %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "blue", legend="singularity") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "blue") %>%
y_range(c(0,maxrange ))                                                                                     # legend="singularity"
### Repeats singularity scatter boxplot + hover of average total time
# N.B. The eagle_REPEATS_ss_slurm_id.txt data was created via a shell script "repeat_processing.sh"
# likewise with:  eagle_HDF5_cs_eigenblas_slurm_id.txt
# This script added the SLURM_ID value from the .res output data filename
df_rep_ss <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_REPEAT_cs_CRAN_slurm_id.txt") # original CRAN timing
get_total_times_for_repeats <- function(df_rep_ss)
{
df_fact <- NULL
# df_fact <- rep('singularity_s',nrow(df_rep_ss))
# df_rep_ss <- add_factor_col(df_rep_ss,df_fact)
df_fact <- as.factor(df_rep_ss$slurm_id2)  # distingush items by SLURM run so we can sum the total time for each run and then plot by numcpus
lev_sid <- levels(df_fact)
#num_sid_levels <- length(lev_sid)
# initialised results vectors
total_t_vect   <- vector("numeric",  length(lev_sid))
ncpu_vect      <- vector("numeric", length(lev_sid))
sid_group_vect <- vector("numeric",  length(lev_sid))
factlev        <- vector('character',length(lev_sid))
fact_itter <- 1
for (fact in lev_sid) {
vect_ref <-  fact_itter
sub_df <- subset(df_rep_ss, df_fact==fact, c(function.,ncpu,time_ms))
ncpu_vect[vect_ref]    <- unique(sub_df$ncpu)
total_t_vect[vect_ref] <- sum((sub_df)$time_ms)
factlev[vect_ref] <- fact
fact_itter <- fact_itter + 1 ;
}
# Convert vectors to a list, add names and convert list to df
tlist <- list(ncpu_vect,total_t_vect,factlev)
names(tlist) <- c("ncpu","total_time","system")
total_time_df <- as.data.frame(tlist,stringsAsFactors=T)
# str(ave_time_df$ncpu)
}
# this function requires the output from get_total_times_for_repeats() to
# compute the total_time averages
get_average_times_for_repeats <- function(total_time_df)
{
## compute the average value to be used for hover overlay
num_cpu_vals <- length(unique(total_time_df$ncpu))
ave_by_cpu   <- vector('numeric',num_cpu_vals)
cpu_by_cpu   <- vector('numeric',num_cpu_vals)
cpu_order <- order(as.numeric(unique(total_time_df$ncpu)))
itter <- 2
# str(cpunum)
for (itter in 1:num_cpu_vals) {
cpunum <- unique(as.numeric(total_time_df$ncpu))[cpu_order[itter]]
#message(cpunum)
ave_by_cpu[itter]  <- ave(subset(total_time_df, ncpu==cpunum, c(ncpu,total_time))$total_time)[1]
cpu_by_cpu[itter] <- as.numeric(cpunum)
}
tlist <- list(as.character(cpu_by_cpu),ave_by_cpu)
names(tlist) <- c("ncpu","average_time")
ave_time_df <- as.data.frame(tlist,stringsAsFactors=T)
}
maxrange <- roundUpNice(max(total_time_df$total_time/1000))
fig <- figure( ylab = "Total Time (s)", width = 600, legend_location = "top_right") %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "blue", legend="singularity") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "blue") %>%
y_range(c(0,maxrange ))                                                                                     # legend="singularity"
### Repeats singularity scatter boxplot + hover of average total time
# N.B. The eagle_REPEATS_ss_slurm_id.txt data was created via a shell script "repeat_processing.sh"
# likewise with:  eagle_HDF5_cs_eigenblas_slurm_id.txt
# This script added the SLURM_ID value from the .res output data filename
df_rep_ss <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_REPEAT_cs_CRAN_slurm_id.txt") # original CRAN timing
roundUpNice <- function(x, nice=c(1,2,4,5,6,8,10)) {
if(length(x) != 1) stop("'x' must be of length 1")
10^floor(log10(x)) * nice[[which(x <= 10^floor(log10(x)) * nice)[[1]]]]
}
get_total_times_for_repeats <- function(df_rep_ss)
{
df_fact <- NULL
# df_fact <- rep('singularity_s',nrow(df_rep_ss))
# df_rep_ss <- add_factor_col(df_rep_ss,df_fact)
df_fact <- as.factor(df_rep_ss$slurm_id2)  # distingush items by SLURM run so we can sum the total time for each run and then plot by numcpus
lev_sid <- levels(df_fact)
#num_sid_levels <- length(lev_sid)
# initialised results vectors
total_t_vect   <- vector("numeric",  length(lev_sid))
ncpu_vect      <- vector("numeric", length(lev_sid))
sid_group_vect <- vector("numeric",  length(lev_sid))
factlev        <- vector('character',length(lev_sid))
fact_itter <- 1
for (fact in lev_sid) {
vect_ref <-  fact_itter
sub_df <- subset(df_rep_ss, df_fact==fact, c(function.,ncpu,time_ms))
ncpu_vect[vect_ref]    <- unique(sub_df$ncpu)
total_t_vect[vect_ref] <- sum((sub_df)$time_ms)
factlev[vect_ref] <- fact
fact_itter <- fact_itter + 1 ;
}
# Convert vectors to a list, add names and convert list to df
tlist <- list(ncpu_vect,total_t_vect,factlev)
names(tlist) <- c("ncpu","total_time","system")
total_time_df <- as.data.frame(tlist,stringsAsFactors=T)
# str(ave_time_df$ncpu)
}
# this function requires the output from get_total_times_for_repeats() to
# compute the total_time averages
get_average_times_for_repeats <- function(total_time_df)
{
## compute the average value to be used for hover overlay
num_cpu_vals <- length(unique(total_time_df$ncpu))
ave_by_cpu   <- vector('numeric',num_cpu_vals)
cpu_by_cpu   <- vector('numeric',num_cpu_vals)
cpu_order <- order(as.numeric(unique(total_time_df$ncpu)))
itter <- 2
# str(cpunum)
for (itter in 1:num_cpu_vals) {
cpunum <- unique(as.numeric(total_time_df$ncpu))[cpu_order[itter]]
#message(cpunum)
ave_by_cpu[itter]  <- ave(subset(total_time_df, ncpu==cpunum, c(ncpu,total_time))$total_time)[1]
cpu_by_cpu[itter] <- as.numeric(cpunum)
}
tlist <- list(as.character(cpu_by_cpu),ave_by_cpu)
names(tlist) <- c("ncpu","average_time")
ave_time_df <- as.data.frame(tlist,stringsAsFactors=T)
}
total_time_df <- get_total_times_for_repeats(df_rep_ss)
ave_time_df <- get_average_times_for_repeats(total_time_df)
maxrange <- roundUpNice(max(total_time_df$total_time/1000))
library(rbokeh) # title="Singularity, Singulatity+HDF, R native CRAN, R + eigen_use_blas",
fig <- figure( ylab = "Total Time (s)", width = 600, legend_location = "top_right") %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "blue", legend="singularity") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "blue") %>%
y_range(c(0,maxrange ))                                                                                     # legend="singularity"
fig
df_rep_ss <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_REPEATS_ss_slurm_id.txt") # eagle_REPEATS_ss.txt
total_time_df <- get_total_times_for_repeats(df_rep_ss)
ave_time_df <- get_average_times_for_repeats(total_time_df)
fig <- fig %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "red", legend="singularity_hdf") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "red") # legend="singularity & HDF"
fig
df_rep_ss <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_REPEATS_HDF5_ss_slurm_id.txt")
fig <- fig %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "green", legend="R native + eigen_use_blas") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "green") #  legend="R & eigen_use_blas & hdf"
### Repeats singularity scatter boxplot + hover of average total time
# N.B. The eagle_REPEATS_ss_slurm_id.txt data was created via a shell script "repeat_processing.sh"
# likewise with:  eagle_HDF5_cs_eigenblas_slurm_id.txt
# This script added the SLURM_ID value from the .res output data filename
df_rep_ss <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_REPEAT_cs_CRAN_slurm_id.txt") # original CRAN timing
roundUpNice <- function(x, nice=c(1,2,4,5,6,8,10)) {
if(length(x) != 1) stop("'x' must be of length 1")
10^floor(log10(x)) * nice[[which(x <= 10^floor(log10(x)) * nice)[[1]]]]
}
total_time_df <- get_total_times_for_repeats(df_rep_ss)
ave_time_df <- get_average_times_for_repeats(total_time_df)
# ave_time_df$jitwhich <- paste0(ave_time_df$ncpu, ":", ave_time_df$average_time)
# The following dataframe is the 1 GPU results with added number of cores:
# tlist <- list(as.character(ncps_gpu_1),rep(1,length(ncps_gpu_1)), total_time_gpu_1)
# names(tlist) <- c("ncpu","ngpu","average_time")
# gpu_time_df <- as.data.frame(tlist,stringsAsFactors=T)
maxrange <- roundUpNice(max(total_time_df$total_time/1000))
# Plot Repeat measures for CPU resu lts as boxplot display of total times
library(rbokeh) # title="Singularity, Singulatity+HDF, R native CRAN, R + eigen_use_blas",
fig <- figure( ylab = "Total Time (s)", width = 600, legend_location = "top_right") %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "blue", legend="singularity") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "blue") %>%
y_range(c(0,maxrange ))                                                                                     # legend="singularity"
df_rep_ss <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_REPEATS_ss_slurm_id.txt") # eagle_REPEATS_ss.txt
total_time_df <- get_total_times_for_repeats(df_rep_ss)
ave_time_df <- get_average_times_for_repeats(total_time_df)
# ave_time_df$jitwhich <- paste0(ave_time_df$ncpu, ":", ave_time_df$average_time)
fig <- fig %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "red", legend="singularity_hdf") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "red") # legend="singularity & HDF"
df_rep_ss <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_REPEATS_HDF5_ss_slurm_id.txt")
total_time_df <- get_total_times_for_repeats(df_rep_ss)
ave_time_df <- get_average_times_for_repeats(total_time_df)
fig <- fig %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "green", legend="R native + eigen_use_blas") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "green") #  legend="R & eigen_use_blas & hdf"
df_rep_ss <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_HDF5_cs_eigenblas_slurm_id.txt") # eagle_REPEATS_ss.txt
total_time_df <- get_total_times_for_repeats(df_rep_ss)
ave_time_df <- get_average_times_for_repeats(total_time_df)
fig <- fig %>%
ly_boxplot(ncpu, total_time/1000,  data = total_time_df , color = "orange",  legend="R native CRAN") %>%
ly_points(ncpu, average_time/1000, data = ave_time_df, hover=list(ncpu,average_time/1000), color = "orange") # legend="R & CRAN equiv"
fig
### GPU results - total times:
df_gpu_01 <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_compact_gpu_1_2_3_4_ncpu_01_v2.txt")
df_gpu_02 <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_compact_gpu_1_2_3_4_ncpu_02_v2.txt")
df_gpu_04 <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_compact_gpu_1_2_3_ncpu_04.txt")
df_gpu_14 <- read.csv(file="\\\\braggflush1\\flush1\\bow355\\AMplus_new_code\\Large\\eagle_compact_gpu_1_2_ncpu_14.txt")
total_time_gpu_1 <- vector("numeric",4)
total_time_gpu_1[1] <- sum((subset(df_gpu_01, ngpu==1, c(function.,ncpu,ngpu,time_ms)))$time_ms)
total_time_gpu_1[2] <- sum((subset(df_gpu_02, ngpu==1, c(function.,ncpu,ngpu,time_ms)))$time_ms)
total_time_gpu_1[3] <- sum((subset(df_gpu_04, ngpu==1, c(function.,ncpu,ngpu,time_ms)))$time_ms)
total_time_gpu_1[4] <- sum((subset(df_gpu_14, ngpu==1, c(function.,ncpu,ngpu,time_ms)))$time_ms)
ncps_gpu_1 <- c(1,2,4,14)
figure(title="Eagle Total Time (4 interations, dataset size = 2000 x 499829, 1 x P100 GPU LD_PRELOAD)") %>%
ly_points(x=ncps_gpu_1, y=total_time_gpu_1/1000, hover = list(total_time_gpu_1)) %>%
y_axis(label = "Time/s", log=F) %>%
y_range(c(-100, 1750 )) %>%
x_range(c(0, 29 )) %>%
x_axis(label = "Number of CPU cores")
fig <- fig %>%
ly_points(ncpu, average_time/1000, data = gpu_time_df, hover = list(total_time_gpu_1/1000, ngpu))
fig <- fig %>%  ly_points(x=ncps_gpu_1, y=total_time_gpu_1/1000, hover = list(total_time_gpu_1))
total_time_gpu_1
ncps_gpu_1
str(ncps_gpu_1)
ncps_gpu_1 <- integer(1,2,4,14)
ncps_gpu_1 <vector("integer",4)
ncps_gpu_1 <- vector("integer",4)
ncps_gpu_1 <- integer(1,2,4,14)
ncps_gpu_1 <- vector("integer",4)
ncps_gpu_1[1] <- 1
ncps_gpu_1[2] <- 2
ncps_gpu_1[3] <- 4
ncps_gpu_1[4] <- 14
fig <- fig %>%  ly_points(x=ncps_gpu_1, y=total_time_gpu_1/1000, hover = list(total_time_gpu_1))
ncps_gpu_1
str(ncps_gpu_1)
ncps_gpu_1 <- vector("integer",4)
ncps_gpu_1[1] <- 1
ncps_gpu_1[2] <- 2
ncps_gpu_1[3] <- 4
ncps_gpu_1[4] <- 14
str(ncps_gpu_1)
ncps_gpu_1 <- vector("int",4)
str(ncps_gpu_1)
ncps_gpu_1 <- vector("int",4)
ncps_gpu_1 <- as.integer(ncps_gpu_1)
str(ncps_gpu_1)
ncps_gpu_1 <- as.integer(1,2,4,14)
str(ncps_gpu_1)
ncps_gpu_1 <- as.integer(c(1,2,4,14))
str(ncps_gpu_1)
# Add the GPU timing data:
fig <- fig %>%  ly_points(x=ncps_gpu_1, y=total_time_gpu_1/1000, hover = list(total_time_gpu_1))
# Add the GPU timing data:
fig <- fig %>%  ly_points(x=ncps_gpu_1, y=total_time_gpu_1/1000, hover = list(total_time_gpu_1))
total_time_gpu_1
figure(title="Eagle Total Time (4 interations, dataset size = 2000 x 499829, 1 x P100 GPU LD_PRELOAD)") %>%
ly_points(x=ncps_gpu_1, y=total_time_gpu_1/1000, hover = list(total_time_gpu_1)) %>%
y_axis(label = "Time/s", log=F) %>%
y_range(c(-100, 1750 )) %>%
x_range(c(0, 29 )) %>%
x_axis(label = "Number of CPU cores")
figure(title="Eagle Total Time (4 interations, dataset size = 2000 x 499829, 1 x P100 GPU LD_PRELOAD)") %>%
ly_points(x=ncps_gpu_1, y=total_time_gpu_1/1000, hover = list(total_time_gpu_1/1000)) %>%
y_axis(label = "Time/s", log=F) %>%
y_range(c(-100, 1750 )) %>%
x_range(c(0, 29 )) %>%
x_axis(label = "Number of CPU cores")
runApp()
Sys.getenv("HOME")
# flush1 <- "../../../.."
flush1 <- paste0(Sys.getenv("HOME"),"/../..")
flush1
runApp()
runApp()
runApp()
